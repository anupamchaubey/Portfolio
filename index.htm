
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Anupam Chaubey - Portfolio</title>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com"/>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
  <link href="https://fonts.googleapis.com/css2?family=Edu+QLD+Hand:wght@400..700&family=Edu+SA+Hand:wght@400..700&family=Delius&display=swap" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" integrity="sha512-sV3H5kMdZ4OzDGC06JIpOtrRjFtOK/kWa/lsmbcXsAFfRFaN52aMkhKZsQxU/v1kzST09bMNZpu/1jqMGk7mug==" crossorigin="anonymous" referrerpolicy="no-referrer" />

  <!-- Stylesheet -->
  <link rel="stylesheet" href="style.css" />
</head>
<body>
<canvas id="bubble-bg"></canvas>
  <div id="content-wrapper">

  <nav>
    <div class="container">
      <div class="logo">Anupam Chaubey</div>
      <ul>
        <li><a href="#about">About</a></li>
        <li><a href="#projects">Projects</a></li>
        <li><a href="#skills">Skills</a></li>
        <li><a href="#resume">Resume</a></li>
        <li><a href="#contact">Contact</a></li>
      </ul>
      <button id="theme-toggle">ðŸŒ—</button>
    </div>
  </nav>

  <header>
    <img src="images/profile.jpeg" alt="Anupam Chaubey" class="hero-img" />
    <h1>Hi, I'm Anupam ðŸ‘‹</h1>
    <p>Full-Stack ( major : Backend ) Developer | Java | Spring Boot | MongoDB</p>
    <a href="resume.pdf" target="_blank">
      <button class="resume-btn">Download Resume</button>
    </a>
    <div class="scroll-indicator">â†“</div>
  </header>

  <section id="about">
    <h2>About Me</h2>
    <p>
      I'm Anupam Chaubey, a B.Tech CSE student at Galgotias University (2027 batch). Passionate about full-stack development, I specialize in Java, Spring Boot, MongoDB, and building real-world backend services. I enjoy creating clean, modular applications and actively solving DSA problems on LeetCode (200+ solved).<br><br>
      I'm currently expanding my knowledge in frontend frameworks and deploying projects on platforms like Netlify and Vercel.
    </p>
  </section>

  <section id="projects">
  <h2>Projects</h2>
  <div class="project-grid">
    <div class="card">
      <div class="card-inner">
        <div class="card-front"><h3>CabLelo</h3></div>
        <div class="card-back">
          <p>Spring Boot + MongoDB backend for cab booking. Features include role-based access (Admin, Driver, Customer), REST APIs.<br/>
          <a href="https://github.com/lostannu/Cab-lelo" target="_blank">View on GitHub</a></p>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-inner">
        <div class="card-front"><h3>To-Do List</h3></div>
        <div class="card-back">
          <p>Java application using file handling and Java Collections for managing tasks. Modular design via OOP.<br/>
          <a href="https://github.com/lostannu/To-Do-List" target="_blank">View on GitHub</a></p>
        </div>
      </div>
    </div>

    <div class="card">
      <div class="card-inner">
        <div class="card-front"><h3>Mini Social Media</h3></div>
        <div class="card-back">
          <p>Developing a lightweight social media platform featuring user posts, likes, comments, and real-time updates. Built with ReactJS and Spring Boot.<br/>
          <a href="https://github.com/anupamchaubey/minisocial" target="_blank">View on GitHub (coming soon)</a></p>
        </div>
      </div>
    </div>
  </div>
</section>


  <section id="skills">
    <h2>Skills</h2>
    <div class="skill"><h3>Programming</h3><p>Java (Core, OOP, Collections), Python (Basics), SQL</p></div>
    <div class="skill"><h3>Backend</h3><p>Spring Boot, Spring Security, REST APIs, MVC Architecture</p></div>
    <div class="skill"><h3>Frontend</h3><p>HTML, CSS, JavaScript (Basic), Responsive Design</p></div>
    <div class="skill"><h3>Databases</h3><p>MongoDB (NoSQL), MySQL (Basic)</p></div>
    <div class="skill"><h3>Tools & Platforms</h3><p>Git, GitHub, IntelliJ, Eclipse, Netlify, Firebase, Vercel</p></div>
  </section>

  <section id="resume">
    <h2>My Resume</h2>
    <p>You can view or download my resume below:</p>
    <div style="margin: 20px 0; border: 2px solid #fca311; border-radius: 8px; overflow: hidden;">
      <iframe src="resume.pdf" width="100%" height="600px" style="border: none;"></iframe>
    </div>
    <a href="resume.pdf" download class="resume-btn">ðŸ“„ Download Resume (PDF)</a>
  </section>

  <section id="contact">
    <h2>Contact Me</h2>
    <div class="contact-info">
      <p>Email: <a href="mailto:icyanupam@gmail.com">icyanupam@gmail.com</a></p>
      <p>LinkedIn: <a href="https://linkedin.com/in/anupamchaubey" target="_blank">linkedin.com/in/anupamchaubey</a></p>
      <p>GitHub: <a href="https://github.com/anupamchaubey" target="_blank">github.com/anupamchaubey</a></p>
    </div>
  </section>

  <footer>
    thanks for visiting ...
  </footer>

  <script>
    const sections = document.querySelectorAll('section');
    const revealOnScroll = () => {
      sections.forEach(sec => {
        const rect = sec.getBoundingClientRect();
        if (rect.top < window.innerHeight * 0.8) {
          sec.classList.add('reveal');
        }
      });
    };
    window.addEventListener('scroll', revealOnScroll);
    window.addEventListener('load', revealOnScroll);

    const toggleBtn = document.getElementById('theme-toggle');
    const prefersLight = window.matchMedia('(prefers-color-scheme: light)').matches;
    const storedTheme = localStorage.getItem('theme');
    if (storedTheme === 'light' || (!storedTheme && prefersLight)) {
      document.body.classList.add('light-mode');
    }
    toggleBtn.addEventListener('click', () => {
      document.body.classList.toggle('light-mode');
      const isLight = document.body.classList.contains('light-mode');
      localStorage.setItem('theme', isLight ? 'light' : 'dark');
    });

    (() => {
  const canvas = document.getElementById('bubble-bg');
  const ctx = canvas.getContext('2d');

  let width, height;
  let bubbles = [];
  const bubbleCount = 100; 
  const maxRadius = 20;

  const mouse = {
    x: null,
    y: null,
    radius: 100
  };

  function resize() {
    width = window.innerWidth;
    height = window.innerHeight;
    canvas.width = width;
    canvas.height = height;
  }

  window.addEventListener('resize', resize);
  resize();

  class Bubble {
    constructor() {
      this.init();
    }

    init() {
      this.x = Math.random() * width;
      this.y = Math.random() * height;
      this.radius = Math.random() * maxRadius / 2 + 7;
      this.baseRadius = this.radius;
      this.speedX = (Math.random() - 1.5) * 0.3; // slow horizontal movement
      this.speedY = (Math.random() - 1.5) * 0.3; // slow vertical movement
      this.color = `rgba(125, 235, 255, ${Math.random() * 0.3 + 0.3})`; // faint white bubbles
    }

    draw() {
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
      ctx.fillStyle = this.color;
      ctx.fill();
    }

    update() {
      // Move slowly
      this.x += this.speedX;
      this.y += this.speedY;

      // Bounce off edges
      if (this.x + this.radius > width || this.x - this.radius < 0) this.speedX *= -1;
      if (this.y + this.radius > height || this.y - this.radius < 0) this.speedY *= -1;

      // Interaction: move away from mouse
      if (mouse.x && mouse.y) {
        const dx = this.x - mouse.x;
        const dy = this.y - mouse.y;
        const dist = Math.sqrt(dx * dx + dy * dy);

        if (dist < mouse.radius + this.radius) {
          // Move bubble away from cursor direction
          const angle = Math.atan2(dy, dx);
          const moveDist = (mouse.radius + this.radius - dist) / 5;

          this.x += Math.cos(angle) * moveDist;
          this.y += Math.sin(angle) * moveDist;

          // Optional: grow bubble slightly on hover
          this.radius = Math.min(this.baseRadius * 2.5, this.radius + 0.3);
        } else {
          // Shrink back to base radius gradually
          if (this.radius > this.baseRadius) this.radius -= 0.1;
          if (this.radius < this.baseRadius) this.radius = this.baseRadius;
        }
      } else {
        // No mouse - shrink back to base radius
        if (this.radius > this.baseRadius) this.radius -= 0.1;
        if (this.radius < this.baseRadius) this.radius = this.baseRadius;
      }

      this.draw();
    }
  }

  // Create bubbles
  for (let i = 0; i < bubbleCount; i++) {
    bubbles.push(new Bubble());
  }

  // Mouse move listener
  window.addEventListener('mousemove', (e) => {
    mouse.x = e.clientX;
    mouse.y = e.clientY;
  });

  // Mouse out listener to reset mouse position
  window.addEventListener('mouseout', () => {
    mouse.x = null;
    mouse.y = null;
  });

  function animate() {
    ctx.clearRect(0, 0, width, height);
    bubbles.forEach(bubble => bubble.update());
    requestAnimationFrame(animate);
  }

  animate();
})();

  </script>
  
</body>
</html>
